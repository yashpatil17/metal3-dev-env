---
  - name: Define number of BMH's
    set_fact:
      NUMBER_OF_BMH: "{{ NUM_OF_MASTER_REPLICAS|int +  NUM_OF_WORKER_REPLICAS|int }}"

  - name: Wait until cluster becomes provisioned.
    k8s_info:
      api_version: cluster.x-k8s.io/{{ CAPI_VERSION }}
      kind: Cluster
      namespace: "{{ NAMESPACE }}"
    register: provisioned_cluster
    retries: 100
    delay: 20
    until: (provisioned_cluster is succeeded) and
           (provisioned_cluster.resources | length > 0) and
           (provisioned_cluster.resources[0].status.phase | default("none") | lower == "provisioned")

  - name: Wait until "{{ NUMBER_OF_BMH }}" BMHs become provisioned.
    kubernetes.core.k8s_info:
      api_version: metal3.io/v1alpha1
      kind: BareMetalHost
      namespace: "{{ NAMESPACE }}"
    register: provisioned_bmh
    retries: 200
    delay: 30
    vars:
      query: "[? status.provisioning.state=='provisioned']"
    until: (provisioned_bmh is succeeded) and
           (provisioned_bmh.resources | length > 0) and
           (provisioned_bmh.resources | json_query(query) | length ==  (NUMBER_OF_BMH | int))

  - name: Wait until "{{ NUMBER_OF_BMH }}" machines become running.
    k8s_info:
      api_version: cluster.x-k8s.io/{{ CAPI_VERSION }}
      kind: Machine
      namespace: "{{ NAMESPACE }}"
    register: provisioned_machines
    retries: 150
    delay: 20
    vars:
      query: "[? status.phase=='running' || status.phase=='Running']"
    until: (provisioned_machines is succeeded) and
           (provisioned_machines.resources | length > 0) and
           (provisioned_machines.resources | json_query(query) | length == (NUMBER_OF_BMH | int))

  - name: Fetch target cluster kubeconfig
    kubernetes.core.k8s_info:
      api_version: v1
      kind: Secret
      name: "{{ CLUSTER_NAME }}-kubeconfig"
      namespace: "{{ NAMESPACE }}"
    register: kubeconfig_secret

  - name: Store target cluster kubeconfig
    blockinfile:
      path: /tmp/kubeconfig-{{ CLUSTER_NAME }}.yaml
      create: yes
      block: "{{ kubeconfig_secret.resources[0].data.value | b64decode }}"

  # Install Calico
  - name: Download Calico manifest
    get_url:
      url: https://docs.projectcalico.org/manifests/calico.yaml
      dest: /tmp/
      mode: '664'
    register: calico_manifest

  - name: Replace the POD_CIDR in calico config
    replace:
      path: /tmp/calico.yaml
      regexp: "192.168.0.0/16"
      replace: "{{ POD_CIDR }}"
    register: updated_manifest

  - name: Add IP_AUTODETECTION_METHOD in calico config Ubuntu
    blockinfile:
      path: /tmp/calico.yaml
      insertafter: "{{ POD_CIDR }}"
      block: |
          # for indentation
                      - name: IP_AUTODETECTION_METHOD
                        value: "interface=ens3"
    when:
      IMAGE_OS == "Ubuntu"

  - name: Add IP_AUTODETECTION_METHOD in calico config Centos
    blockinfile:
      path: /tmp/calico.yaml
      insertafter: "{{ POD_CIDR }}"
      block: |
          # for indentation
                      - name: IP_AUTODETECTION_METHOD
                        value: "interface=eth1"
    when:
      IMAGE_OS == "Centos"

  - name: Apply Calico manifest
    kubernetes.core.k8s:
      state: present
      src: "/tmp/calico.yaml"
      kubeconfig: "/tmp/kubeconfig-{{ CLUSTER_NAME }}.yaml"
    register: install_cni

  # Check for pods & nodes on the target cluster
  - name: Wait for all pods to be in running state
    kubernetes.core.k8s_info:
      api_version: v1
      kind: Pod
      namespace: "{{ NAMESPACE }}"
      kubeconfig: /tmp/kubeconfig-{{ CLUSTER_NAME }}.yaml
      field_selectors:
        - status.phase!=Running
    retries: 150
    delay: 20
    register: not_running_pods
    until: (not_running_pods is succeeded) and
           (not_running_pods.resources | length == 0)

  - name: Wait for nodes to be in ready state
    kubernetes.core.k8s_info:
      api_version: v1
      kind: Node
      kubeconfig: /tmp/kubeconfig-{{ CLUSTER_NAME }}.yaml
    retries: 150
    delay: 3
    register: nodes
    vars:
      # For all Nodes, select those that have the Ready condition set to True
      query: "[*].status.conditions[? type=='Ready' && status=='True']"
    until: (nodes is succeeded) and
           (nodes.resources | length > 0) and
           (nodes.resources | json_query(query) | length == (NUMBER_OF_BMH | int))
